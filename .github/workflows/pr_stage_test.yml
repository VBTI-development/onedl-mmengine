name: pr_stage_test

env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true


on:
  pull_request:
    paths-ignore:
      - ".github/**.md"
      - "docker/**"
      - "docs/**"
      - "README.md"
      - "README_zh-CN.md"
      - "CONTRIBUTING.md"
      - "CONTRIBUTING_zh-CN.md"
      - ".pre-commit-config.yaml"
      - ".pre-commit-config-zh-cn.yaml"
      - "examples/**"


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_cpu_no_torch:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        python-version: ['3.10']
    steps:
      - uses: actions/checkout@v4
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v6
        with:
          activate-environment: true
          python-version: ${{ matrix.python-version }}

      - name: Build from source
        run: |
          uv pip install -e . -v
      - name: Install dependencies
        run: |
          uv pip install -r pyproject.toml --group test-lite
      - name: Run unit tests with coverage
        run: |
          uv run pytest tests/test_config tests/test_registry tests/test_fileio tests/test_logging tests/test_utils --ignore=tests/test_utils/test_dl_utils

  build_cpu:
    runs-on: ubuntu-22.04
    needs: [build_cpu_no_torch]
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        include:
          - python-version: '3.10'
            torch: 2.4.1
            torchvision: 0.19.1
    steps:
      - uses: actions/checkout@v4
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
          activate-environment: true
      - name: Install PyTorch
        run: |
          uv pip install torch==${{ matrix.torch }} torchvision
      - name: Build MMEngine from source
        run: uv pip install -e . -v
      - name: Install unit tests dependencies
        run: |
          uv pip install -r pyproject.toml
          uv pip install -r pyproject.toml --group test
      - name: Run unittests and generate coverage report
        run: |
          uv run coverage run --branch --source mmengine -m pytest tests/  --ignore tests/test_dist

  build_gpu:
    runs-on: ubuntu-22.04
    needs: build_cpu
    defaults:
      run:
        shell: bash -l {0}
    env:
      MKL_THREADING_LAYER: GNU
      UV_CACHE_DIR: /__w/_uv_cache # set cache to be on same disk to avoid hardlink copies.
    strategy:
      matrix:
        include:
          - python-version: '3.10'
            torch: '2.4.1'
            cuda: 'cu118'
            image: 'nvidia/cuda:11.8.0-cudnn8-devel-ubuntu22.04'
          - python-version: '3.10'
            torch: '2.8.0'
            cuda: 'cu129'
            image: 'nvidia/cuda:12.9.1-cudnn-devel-ubuntu22.04'
    container:
      image: ${{ matrix.image }}
    permissions:
      pull-requests: write
    steps:
      - name: Show disk usage
        run: df -h
      - uses: actions/checkout@v4
      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v6
        with:
          activate-environment: true
          python-version: ${{ matrix.python-version }}
          cache-local-path: /__w/_uv_cache
      - name: Install system dependencies
        run: |
          apt-get update && apt-get install -y git ffmpeg libturbojpeg && apt-get clean -y
      - name: Clean up apt cache and pip cache
        run: |
          apt-get clean
          rm -rf /var/lib/apt/lists/*
          rm -rf ~/.cache/pip
          rm -rf /root/.cache/pip
          rm -rf /tmp/*
      - name: Show disk usage
        run: df -h
      - name: Install torch
        run: |
          uv pip install -v --torch-backend=${{matrix.cuda}} torch==${{ matrix.torch }} torchvision
      - name: Show disk usage
        run: df -h
      - name: Clear uv cache
        run: uv cache clean
      - name: Show disk usage
        run: df -h
      - name: Install mmengine
        run: |
          uv pip install -e . -v
          uv pip install -r pyproject.toml --group test
      - name: Show disk usage
        run: df -h
      - name: Run unit tests with coverage
        run: |
          set -e
          uv run coverage run --branch --source mmengine -m pytest tests/  --ignore tests/test_dist
          uv run coverage xml
      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          format: markdown
          output: both
          hide_branch_rate: false
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

  # build_windows:
  #   runs-on: windows-2022
  #   strategy:
  #     matrix:
  #       python-version: [3.9]
  #       platform: [cpu, cu111]
  #       torch: [1.8.1]
  #       torchvision: [0.9.1]
  #       include:
  #         - python-version: 3.8
  #           platform: cu118
  #           torch: 2.1.0
  #           torchvision: 0.16.0
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: Upgrade pip
  #       # Windows CI could fail If we call `pip install pip --upgrade` directly.
  #       run: python -m pip install pip wheel --upgrade
  #     - name: Install PyTorch
  #       run: pip install torch==${{matrix.torch}}+${{matrix.platform}} torchvision==${{matrix.torchvision}}+${{matrix.platform}} -f https://download.pytorch.org/whl/${{matrix.platform}}/torch_stable.html
  #     - name: Build MMEngine from source
  #       run: pip install -e . -v
  #     - name: Install unit tests dependencies
  #       run: |
  #         pip install -r requirements/tests.txt
  #         pip install openmim
  #         mim install mmcv
  #     - name: Run CPU unittests
  #       run: pytest tests/  --ignore tests/test_dist
  #       if: ${{ matrix.platform == 'cpu' }}
  #     - name: Run GPU unittests
  #       # Skip testing distributed related unit tests since the memory of windows CI is limited
  #       run: pytest tests/ --ignore tests/test_dist --ignore tests/test_optim/test_optimizer/test_optimizer_wrapper.py --ignore tests/test_model/test_wrappers/test_model_wrapper.py --ignore tests/test_hooks/test_sync_buffers_hook.py
  #       if: ${{ matrix.platform == 'cu111' }} || ${{ matrix.platform == 'cu118' }}
